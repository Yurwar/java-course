package com.yurwar.controller;import com.yurwar.ConsoleReader;import com.yurwar.JSONFileOperator;import com.yurwar.model.Bus;import com.yurwar.model.BusPark;import com.yurwar.services.BusService;import com.yurwar.view.ConsoleView;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import java.io.IOException;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.Date;public class BusController {    private BusPark busPark;    private ConsoleView view;    private ConsoleReader reader;    private JSONFileOperator fileOperator;    private static final Logger logger = LogManager.getLogger(BusController.class);    public BusController() {        fileOperator = new JSONFileOperator("Bus_park.json", "Final_result.json");        busPark = new BusPark();        view = new ConsoleView();        reader = new ConsoleReader();    }    public void start() {        logger.trace("Starting a program");        BusService.fillBusArrayFromFile(busPark, fileOperator, view);        int inputNumber;        outer: while (true){            view.printMsg(ConsoleView.MENU);            try {                inputNumber = reader.readInt();            } catch (NumberFormatException e) {                logger.warn("Incorrect input. Can not parse integer");                view.printMsg(ConsoleView.INCORRECT_INPUT_MSG);                continue;            }            Bus[] resArr;            switch (inputNumber) {                case 1: {                    logger.trace("Printing all buses");                    view.printResultBusTable(busPark.getBuses());                    break;                }                case 2: {                    logger.trace("Searching for buses by route");                    int routeToFind = BusService.getRouteToFind(view, reader);                    resArr = busPark.getByRouteNumber(routeToFind);                    view.printResultBusTable(resArr);                    saveResults(resArr);                    break;                }                case 3: {                    logger.trace("Searching for buses by exploitation interval");                    int lowerExploitationInterval = BusService.getLowerExploitationInterval(view, reader);                    resArr = busPark.getByExploitation(lowerExploitationInterval);                    view.printResultBusTable(resArr);                    saveResults(resArr);                    break;                }                case 4: {                    logger.trace("Searching for buses by mileage");                    int lowerMileage = BusService.getLowerMileage(view, reader);                    resArr = busPark.getByMileage(lowerMileage);                    view.printResultBusTable(resArr);                    saveResults(resArr);                    break;                }                case 5:  {                    break outer;                }                default: {                    logger.warn("Incorrect menu point input");                    view.printMsg(ConsoleView.INCORRECT_INPUT_MSG);                    break;                }            }        }        logger.trace("Finish a program");        view.printMsg(ConsoleView.FINAL_MSG);    }    private void saveResults(Bus[] resultArr) {        if(resultArr == null || resultArr.length == 0) {            return;        }        view.printMsg("Do you want to save the result?(y/N)\n-> ");        String condition = reader.readString();        if(condition.equalsIgnoreCase("y") || condition.equalsIgnoreCase("yes")) {            logger.trace("Saving operation results");            DateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");            try {                fileOperator.write(resultArr, "Results-" + dateFormat.format(new Date()) + ".json");            } catch (IOException e) {                logger.error("Can not write to file");                view.printMsg(ConsoleView.CAN_NOT_WRITE_FILE);            }        }    }}